---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "@fontsource-variable/eb-garamond";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link
            rel="icon"
            type="image/x-icon"
            href={import.meta.env.MODE === "production"
                ? "/abogados-rcg-astro-fromscratch/AbogadosRCG-Logo-icon.ico"
                : "/AbogadosRCG-Logo-icon.ico"}
        />
        <meta name="generator" content={Astro.generator} />
        <title>
            Abogados RCG - Tus abogados de confianza en Sanl√∫car de Barrameda
        </title>
    </head>
    <body class="bg-main-blue overflow-x-hidden">
        <Header />
        <slot />
        <Footer />
    </body>
</html>

<style>
    html,
    body {
        font-family: "EB Garamond Variable", serif;
        color: #1c1c1c;
        margin: 0;
        width: 100%;
        height: 100%;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove("opacity-0");
                        entry.target.classList.add("opacity-100");
                    }
                });
            },
            { threshold: 0.2 }
        );

        document
            .querySelectorAll(".fadeInOnScroll")
            .forEach((el) => observer.observe(el));
    });
    document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove(
                            "opacity-0",
                            "translate-x-[-5rem]"
                        );
                        entry.target.classList.add(
                            "opacity-100",
                            "translate-x-0"
                        );
                    }
                });
            },
            { threshold: 0.2 }
        );

        document
            .querySelectorAll(".fadeInRightOnScroll")
            .forEach((el) => observer.observe(el));
    });
    document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove(
                            "opacity-0",
                            "translate-x-20"
                        );
                        entry.target.classList.add(
                            "opacity-100",
                            "translate-x-0"
                        );
                    }
                });
            },
            { threshold: 0.2 }
        );

        document
            .querySelectorAll(".fadeInLeftOnScroll")
            .forEach((el) => observer.observe(el));
    });
    document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove(
                            "opacity-0",
                            "translate-y-[-3rem]"
                        );
                        entry.target.classList.add(
                            "opacity-100",
                            "translate-x-0"
                        );
                    }
                });
            },
            { threshold: 0.2 }
        );

        document
            .querySelectorAll(".fadeInDownOnScroll")
            .forEach((el) => observer.observe(el));
    });
</script>
